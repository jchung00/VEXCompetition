#pragma config(Motor,  port2,           frontRightMotor, tmotorServoContinuousRotation, openLoop, reversed)
#pragma config(Motor,  port3,           backRightMotor, tmotorServoContinuousRotation, openLoop, reversed)
#pragma config(Motor,  port4,           frontLeftMotor, tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port5,           backLeftMotor, tmotorServoStandard, openLoop)
#pragma config(Motor,  port9,           elevator,      tmotorServoContinuousRotation, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VEX EDR                      */
/*                                                                           */
/*---------------------------------------------------------------------------*/

// This code is for the VEX cortex platform
#pragma platform(VEX2)

// Select Download method as "competition"
#pragma competitionControl(Competition)

#pragma autonomousDuration(20)
#pragma userControlDuration(120)

//Main competition background code...do not modify!
#include "Vex_Competition_Includes.c"


/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/
void forward(){
		motor[frontRightMotor] = 127;
    motor[backRightMotor]  = 127;
    motor[frontLeftMotor] = 127;
    motor[backLeftMotor]  = 127;
	}

	void backward(){
		motor[frontRightMotor] = -127;
    motor[backRightMotor]  = -127;
    motor[frontLeftMotor] = -127;
    motor[backLeftMotor]  = -127;
	}

	void left(){
		motor[frontRightMotor] = -127;
    motor[backRightMotor]  = 127;
    motor[frontLeftMotor] = -127;
    motor[backLeftMotor]  = 127;
	}

	void right(){
		motor[frontRightMotor] = 127;
    motor[backRightMotor]  = -127;
    motor[frontLeftMotor] = 127;
    motor[backLeftMotor]  = -127;
	}

	void turnRight(){
		motor[frontRightMotor] = 127;
    motor[backRightMotor]  = 127;
    motor[frontLeftMotor] = -127;
    motor[backLeftMotor]  = -127;
	}

	void turnLeft(){
		motor[frontRightMotor] = -127;
    motor[backRightMotor]  = -127;
    motor[frontLeftMotor] = 127;
    motor[backLeftMotor]  = 127;
	}

	void elevate(){
		ClearTimer(T1);
		while(time1[T1] < 1500){
			motor[elevator] = 120;
		}
	}

	void elevateDown(){
		ClearTimer(T2);
		while(time1[T2] < 1500){
			motor[elevator] = -120;
		}
	}

	void stopMotors() {
		motor[frontRightMotor] = 0;
    motor[backRightMotor]  = 0;
    motor[frontLeftMotor] = 0;
    motor[backLeftMotor]  = 0;
}

void pre_auton()
{
  // Set bStopTasksBetweenModes to false if you want to keep user created tasks
  // running between Autonomous and Driver controlled modes. You will need to
  // manage all user created tasks if set to false.
  bStopTasksBetweenModes = true;
  motor[backLeftMotor] = 0;
  motor[backRightMotor] = 0; 
  motor[frontLeftMotor] = 0;
  motor[frontRightMotor] = 0;
  

	// Set bDisplayCompetitionStatusOnLcd to false if you don't want the LCD
	// used by the competition include file, for example, you might want
	// to display your team name on the LCD in this function.
	// bDisplayCompetitionStatusOnLcd = false;

  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task autonomous()
{
	
   AutonomousCodePlaceholderForTesting(); 
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task usercontrol()
{
  // User control code here, inside the loop  
	
  while (true)
  {
    // This is the main execution loop for the user control program.
    // Each time through the loop your program should update motor + servo
    // values based on feedback from the joysticks.
		if(vexRT[Btn7U] == 1){
    	forward();
  	}
  	if(vexRT[Btn7L] == 1){
  		left();
  	}
  	if(vexRT[Btn7R] == 1){
  		right();
  	}
  	if(vexRT[Btn7D] == 1){
  		backward();
  	}
  	if(vexRT[Btn8L] == 1){
  		turnLeft();
  	}
  	if(vexRT[Btn8R] == 1){
  		turnRight();
  	}
  	if(vexRT[Btn5U] == 1){
  		elevate();
  	}
  	if(vexRT[Btn5D] == 1){
  		elevateDown();
  	}
  	if(vexRT[Btn6U] == 1){
  		motor[elevator] = 0;
  	}
  	if(vexRT[Btn6D] == 1){
  		stopMotors();
  }
  }
}
